#!/usr/bin/python3

import asyncio
import subprocess
from pathlib import Path

from ruamel.yaml import YAML

from agithub import GitHub
import yamlutils

import const

WHITELIST = {
  'archlinuxcn-keyring',
  'archlinuxcn-mirrorlist-git',
  'devtools-archlinuxcn',
  'lilac-git',
  'nvchecker-git',
}

def remove_maintainer(pkg: str, maintainers: list[str]) -> None:
  lilac_yaml_path = Path(const.REPODIR) / pkg / 'lilac.yaml'

  # use ruamel.yaml for yaml manipulation while preserving comments
  yaml = YAML()
  with open(lilac_yaml_path) as f:
    lilac_yaml = yaml.load(f.read())

  old_maintainers = lilac_yaml['maintainers']
  removing_indices = [i for i, m in enumerate(old_maintainers)
                      if m['github'] in maintainers]
  for idx in reversed(removing_indices):
    del old_maintainers[idx]

  with open(lilac_yaml_path, 'w') as f:
    yaml.dump(lilac_yaml, stream=f)

  subprocess.check_call(['git', 'add', pkg], cwd=const.REPODIR)

def process_partly_removed(partly) -> None:
  for pkg, maintainers in partly.items():
    remove_maintainer(pkg, maintainers)

async def process_full_removed(removed):
  gh = GitHub(const.GITHUB_TOKEN)
  for user, packages in removed.items():
    packages = set(packages) - WHITELIST
    if len(packages) < 6:
      subject = f'orphaning {", ".join(packages)} for {user}'
      body = ''
    else:
      subject = f'orphaning {len(packages)} packages for {user}'
    body = '''\
### 问题类型 / Type of issues

* 弃置软件包 / orphaning packages

### 受影响的软件包 / Affected packages

'''
    body += ''.join(f'* {pkg}\n' for pkg in packages) + '\n----\n\n'

    if len(packages) == 1:
      body += 'This package was '
    else:
      body += 'These packages were '
    body += f'cleaned up during the {const.CLEANUP_NAME} cleanup (#{const.ISSUE_NR}). If any maintainers want to adopt '
    if len(packages) == 1:
      body += 'it'
    else:
      body += 'any of them'
    body += ", it's time to take action!"

    issue = await gh.create_issue(
      'archlinuxcn/repo', subject,
      body = body,
      labels=['orphaning', 'cleanup'],
    )
    print(f'{issue} created.')
    print(subject, body, sep='\n++++\n', end='\n====\n')
    await asyncio.sleep(3)

async def main() -> None:
  with open('/home/lilydjwg/tmpfs/update.yaml') as f:
    updates = yamlutils.load(f)
  process_partly_removed(updates['partly_removed'])
  # await process_full_removed(updates['removed'])

if __name__ == '__main__':
  asyncio.run(main())
