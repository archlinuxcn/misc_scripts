#!/usr/bin/python3

import sys, os
import json
from pathlib import Path
import logging
from collections import defaultdict
from copy import deepcopy
import time

import pygit2

import yamlutils
from lilac2 import lilacyaml
import const

sys.path.append(os.path.join(os.path.dirname(__file__), '../pylib'))
import gitutils

logger = logging.getLogger(__name__)

REPODIR = Path(const.REPODIR)
lilac_mail = 'lilac@build.archlinuxcn.org'

def get_last_git_update():
  repo = pygit2.Repository(REPODIR)
  stop_time = time.time() - 30 * 86400
  package_last_update = defaultdict(int)
  for commit in gitutils.iter_commits(repo, stop_time, lilac_mail):
    if len(commit.parents) == 1:
      diff = repo.diff(commit, commit.parents[0])
      pkgs = gitutils.get_touched_packages(diff)
      for pkg in pkgs:
        package_last_update[pkg] = max(package_last_update[pkg], commit.commit_time)

  return package_last_update

def main():
  with open('/home/lilydjwg/tmpfs/removed.json') as f:
    removed = json.load(f)['removed']

  old = {}
  for dir in lilacyaml.iter_pkgdir(REPODIR):
    y = lilacyaml.load_lilac_yaml(dir)
    old[dir.name] = {
      x['github'] for x in y.get('maintainers', {})
    }

  new = deepcopy(old)

  for user, pkgs in removed.items():
    for pkg in pkgs:
      ms = new.get(pkg)
      if not ms:
        continue

      try:
        ms.remove(user)
      except KeyError:
        pass

  updated = {}
  pkgs_to_remove = defaultdict(list)
  for name, maintainers in new.items():
    if maintainers and old[name] != maintainers:
      updated[name] = list(old[name] - maintainers)
    elif not maintainers:
      for m in old[name]:
        pkgs_to_remove[m].append(name)

  package_last_update = get_last_git_update()
  for pkgs in pkgs_to_remove.values():
    for pkg in pkgs[:]:
      if package_last_update.get(('archlinuxcn', pkg)):
        pkgs.remove(pkg)

  with open('/home/lilydjwg/tmpfs/update.yaml', 'w') as f:
    yamlutils.dump({
      'partly_removed': updated,
      'removed': dict(pkgs_to_remove),
    }, f)

if __name__ == '__main__':
  from nicelogger import enable_pretty_logging
  enable_pretty_logging('DEBUG')
  main()
